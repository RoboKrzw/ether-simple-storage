{
  "address": "0x0842Bb03Acf40ffB5901E15317f8aB224B40e7c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bb434d182ac0c646f6d1eb8ef9279be564b3cd137e7821f9f5cff0b1252174e",
  "receipt": {
    "to": null,
    "from": "0xeF97E73d1dC2F135C50a7D377756942fb074B522",
    "contractAddress": "0x0842Bb03Acf40ffB5901E15317f8aB224B40e7c2",
    "transactionIndex": 248,
    "gasUsed": "1004043",
    "logsBloom": "0x
    "blockHash": "0x291bfcd855af99f50f0b6753078b3373d8938e2beb7aacaa945a25977dc2dcce",
    "transactionHash": "0x8bb434d182ac0c646f6d1eb8ef9279be564b3cd137e7821f9f5cff0b1252174e",
    "logs": [],
    "blockNumber": 8017467,
    "cumulativeGasUsed": "15353620",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "cc786ff9d510f595034c45ce7c8159fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Robo Krzw\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// 1. Pragma\\r\\npragma solidity ^0.8.7;\\r\\n// 2. Imports\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// 3. Interfaces, Libraries, Contracts\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**@title A sample Funding Contract\\r\\n * @author Robo Krzw\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\n \\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State variables\\r\\n    // jesli tutaj zamiast PUBLIC bedzie PRIVATE to nie bedzie tego mozna zaladowac w testach\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\r\\n    // zmienne imutable - doklejamy i_...\\r\\n    address private immutable i_owner;\\r\\n    // wsz\\u0119dzie tam gdzie nasza zmienna b\\u0119dzie tzw storage-variable, czyli taka kt\\u00f3rej zachowanie kosztuje duzo gazu, to do nazwy mozna dokleic s_....\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    // Events (we have none!)\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions Order:\\r\\n    //// constructor\\r\\n    //// receive\\r\\n    //// fallback\\r\\n    //// external\\r\\n    //// public\\r\\n    //// internal\\r\\n    //// private\\r\\n    //// view / pure\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Funds our contract based on the ETH/USD price\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        s_funders.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // Transfer vs call vs Send\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    // funkcja o tej samej roli co powyzsza, ale zuzywajaca mniej gazu\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        // ponizej czytamy cala tablice do MEMORY jednokrotnie i czytamy z MEMORY zamiast ze STORAGE\\r\\n        // mapping nie mo\\u017ce by\\u0107 w memory\\r\\n        address[] memory funders = s_funders;\\r\\n        for(\\r\\n            uint256 funderIndex = 0; \\r\\n            funderIndex < funders.length; \\r\\n            funderIndex++\\r\\n            ){\\r\\n            address funder = funders[funderIndex];\\r\\n            // ponizej resetujemy nasz funders mapping i zamiast tego uzywamy MEMORY\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n            }\\r\\n        s_funders = new address[](0);\\r\\n        // jesli mamy nawias to  nieuzupe\\u0142nione pola (przed lub po przecinku) oznaczaj\\u0105 zmienna ktora nie jest zachowywana\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /** @notice Gets the amount that an address has funded\\r\\n     *  @param fundingAddress the address of the funder\\r\\n     *  @return the amount funded\\r\\n     */\\r\\n\\r\\n    // view / pure\\r\\n\\r\\n    function getAddressToAmountFunded(address fundingAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n//     function getVersion() public view returns (uint256) {\\r\\n//         return s_priceFeed.version();\\r\\n//     }\\r\\n\\r\\n\\r\\n    // dzieki ponizszym funkcjom zmienne, kt\\u00f3re s\\u0105 private, ustawiamy na public i teraz te nowe nazwy funkcji uzywamy w testach\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd1ab5111be3c0e32b06a6e0673bfcdfb8ea07c9825a66b0a1f409aa1e0bfc55c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  // call it get fiatConversionRate, since it assumes something about decimals\\r\\n  // It wouldn't work for every aggregator\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xab7d80676dc221d14cd91c54314e8708d2b197b64b990984b6c3370d486ed5f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200125738038062001257833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110ca6200018d600039600081816101f1015281816103840152818161042a015281816105b501526107ab01526110ca6000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a6e565b6101a6565b6040516100b49190610ab4565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e9610419565b6040516100f69190610ab4565b60405180910390f35b34801561010b57600080fd5b50610114610426565b6040516101219190610ade565b60405180910390f35b34801561013657600080fd5b5061013f61044e565b60405161014c9190610b58565b60405180910390f35b61015d610478565b005b6101676105b3565b005b34801561017557600080fd5b50610190600480360381019061018b9190610b9f565b610841565b60405161019d9190610ade565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610bcc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610c2a565b915050610277565b50600067ffffffffffffffff81111561033b5761033a610c73565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f929190610964565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103c690610cd3565b60006040518083038185875af1925050503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b505090508061041657600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104b7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088890919063ffffffff16565b10156104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef90610d45565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105479190610d65565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610638576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106bb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610671575b5050505050905060005b81518110156107465760008282815181106106e3576106e2610bcc565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073e90610c2a565b9150506106c5565b50600067ffffffffffffffff81111561076257610761610c73565b5b6040519080825280602002602001820160405280156107905781602001602082028036833780820191505090505b50600090805190602001906107a6929190610964565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610cd3565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b505090508061083d57600080fd5b5050565b600080828154811061085657610855610bcc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610894836108c4565b90506000670de0b6b3a764000085836108ad9190610dbb565b6108b79190610e44565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610f02565b5050509150506402540be4008161095c9190610f7d565b915050919050565b8280548282559060005260206000209081019282156109dd579160200282015b828111156109dc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610984565b5b5090506109ea91906109ee565b5090565b5b80821115610a075760008160009055506001016109ef565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3b82610a10565b9050919050565b610a4b81610a30565b8114610a5657600080fd5b50565b600081359050610a6881610a42565b92915050565b600060208284031215610a8457610a83610a0b565b5b6000610a9284828501610a59565b91505092915050565b6000819050919050565b610aae81610a9b565b82525050565b6000602082019050610ac96000830184610aa5565b92915050565b610ad881610a30565b82525050565b6000602082019050610af36000830184610acf565b92915050565b6000819050919050565b6000610b1e610b19610b1484610a10565b610af9565b610a10565b9050919050565b6000610b3082610b03565b9050919050565b6000610b4282610b25565b9050919050565b610b5281610b37565b82525050565b6000602082019050610b6d6000830184610b49565b92915050565b610b7c81610a9b565b8114610b8757600080fd5b50565b600081359050610b9981610b73565b92915050565b600060208284031215610bb557610bb4610a0b565b5b6000610bc384828501610b8a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3582610a9b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6857610c67610bfb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cbd600083610ca2565b9150610cc882610cad565b600082019050919050565b6000610cde82610cb0565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d2f601b83610ce8565b9150610d3a82610cf9565b602082019050919050565b60006020820190508181036000830152610d5e81610d22565b9050919050565b6000610d7082610a9b565b9150610d7b83610a9b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610db057610daf610bfb565b5b828201905092915050565b6000610dc682610a9b565b9150610dd183610a9b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0a57610e09610bfb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4f82610a9b565b9150610e5a83610a9b565b925082610e6a57610e69610e15565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9481610e75565b8114610e9f57600080fd5b50565b600081519050610eb181610e8b565b92915050565b6000819050919050565b610eca81610eb7565b8114610ed557600080fd5b50565b600081519050610ee781610ec1565b92915050565b600081519050610efc81610b73565b92915050565b600080600080600060a08688031215610f1e57610f1d610a0b565b5b6000610f2c88828901610ea2565b9550506020610f3d88828901610ed8565b9450506040610f4e88828901610eed565b9350506060610f5f88828901610eed565b9250506080610f7088828901610ea2565b9150509295509295909350565b6000610f8882610eb7565b9150610f9383610eb7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fd257610fd1610bfb565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561100f5761100e610bfb565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561104c5761104b610bfb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561108957611088610bfb565b5b82820290509291505056fea264697066735822122019587832ed4de30bfa6f0d5ba06f25a0ce711073ee7bb3001ecce97c50c1cb6964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a6e565b6101a6565b6040516100b49190610ab4565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e9610419565b6040516100f69190610ab4565b60405180910390f35b34801561010b57600080fd5b50610114610426565b6040516101219190610ade565b60405180910390f35b34801561013657600080fd5b5061013f61044e565b60405161014c9190610b58565b60405180910390f35b61015d610478565b005b6101676105b3565b005b34801561017557600080fd5b50610190600480360381019061018b9190610b9f565b610841565b60405161019d9190610ade565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610bcc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610c2a565b915050610277565b50600067ffffffffffffffff81111561033b5761033a610c73565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f929190610964565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103c690610cd3565b60006040518083038185875af1925050503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b505090508061041657600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104b7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088890919063ffffffff16565b10156104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef90610d45565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105479190610d65565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610638576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106bb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610671575b5050505050905060005b81518110156107465760008282815181106106e3576106e2610bcc565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073e90610c2a565b9150506106c5565b50600067ffffffffffffffff81111561076257610761610c73565b5b6040519080825280602002602001820160405280156107905781602001602082028036833780820191505090505b50600090805190602001906107a6929190610964565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610cd3565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b505090508061083d57600080fd5b5050565b600080828154811061085657610855610bcc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610894836108c4565b90506000670de0b6b3a764000085836108ad9190610dbb565b6108b79190610e44565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610f02565b5050509150506402540be4008161095c9190610f7d565b915050919050565b8280548282559060005260206000209081019282156109dd579160200282015b828111156109dc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610984565b5b5090506109ea91906109ee565b5090565b5b80821115610a075760008160009055506001016109ef565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3b82610a10565b9050919050565b610a4b81610a30565b8114610a5657600080fd5b50565b600081359050610a6881610a42565b92915050565b600060208284031215610a8457610a83610a0b565b5b6000610a9284828501610a59565b91505092915050565b6000819050919050565b610aae81610a9b565b82525050565b6000602082019050610ac96000830184610aa5565b92915050565b610ad881610a30565b82525050565b6000602082019050610af36000830184610acf565b92915050565b6000819050919050565b6000610b1e610b19610b1484610a10565b610af9565b610a10565b9050919050565b6000610b3082610b03565b9050919050565b6000610b4282610b25565b9050919050565b610b5281610b37565b82525050565b6000602082019050610b6d6000830184610b49565b92915050565b610b7c81610a9b565b8114610b8757600080fd5b50565b600081359050610b9981610b73565b92915050565b600060208284031215610bb557610bb4610a0b565b5b6000610bc384828501610b8a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3582610a9b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6857610c67610bfb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cbd600083610ca2565b9150610cc882610cad565b600082019050919050565b6000610cde82610cb0565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d2f601b83610ce8565b9150610d3a82610cf9565b602082019050919050565b60006020820190508181036000830152610d5e81610d22565b9050919050565b6000610d7082610a9b565b9150610d7b83610a9b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610db057610daf610bfb565b5b828201905092915050565b6000610dc682610a9b565b9150610dd183610a9b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0a57610e09610bfb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4f82610a9b565b9150610e5a83610a9b565b925082610e6a57610e69610e15565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9481610e75565b8114610e9f57600080fd5b50565b600081519050610eb181610e8b565b92915050565b6000819050919050565b610eca81610eb7565b8114610ed557600080fd5b50565b600081519050610ee781610ec1565b92915050565b600081519050610efc81610b73565b92915050565b600080600080600060a08688031215610f1e57610f1d610a0b565b5b6000610f2c88828901610ea2565b9550506020610f3d88828901610ed8565b9450506040610f4e88828901610eed565b9350506060610f5f88828901610eed565b9250506080610f7088828901610ea2565b9150509295509295909350565b6000610f8882610eb7565b9150610f9383610eb7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fd257610fd1610bfb565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561100f5761100e610bfb565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561104c5761104b610bfb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561108957611088610bfb565b5b82820290509291505056fea264697066735822122019587832ed4de30bfa6f0d5ba06f25a0ce711073ee7bb3001ecce97c50c1cb6964736f6c63430008080033",
  "devdoc": {
    "author": "Robo Krzw",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}